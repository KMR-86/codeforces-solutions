/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int find_deepest(TreeNode *root,int h){
        if(root==nullptr)return h-1;
        return max(find_deepest(root->left,h+1),find_deepest(root->right,h+1));

    }
    int find_sum(TreeNode *root,int h,int max_h){
        if(root==nullptr)return 0;
        if(h==max_h)return root->val;
        return find_sum(root->left,h+1,max_h)+find_sum(root->right,h+1,max_h);
    }
    int deepestLeavesSum(TreeNode* root) {
        int max_h=find_deepest(root,0);
        cout<<max_h;
        return find_sum(root,0,max_h);
    }
};