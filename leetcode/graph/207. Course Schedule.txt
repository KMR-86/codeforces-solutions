class Solution {
public:
    bool ans=1;
    vector<vector<int> > g;
    vector<bool>visited;
    void dfs_one_node(int node){
        if(visited[node]==1){
            ans=0;
            return;
        }
        visited[node]=1;
        for(int i=0;i<g[node].size();i++){
            dfs_one_node(g[node][i]);
            if(ans==0)return;
        }
        visited[node]=0;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        if(numCourses == 0 || prerequisites.size() == 0) return true;
        vector<vector<int> > g_t(numCourses);
        vector<bool>visited_t(numCourses,0);
        visited=visited_t;
        g=g_t;
        for(int i=0;i<prerequisites.size();i++){
            g[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }
        
        // for(int i=0;i<numCourses;i++){
        //     for(int j=0;j<g[i].size();j++){
        //         cout<<i<<"->"<<g[i][j]<<endl;
        //     }
        // }
        for(int i=0;i<numCourses;i++){
            //fill(visited.begin(), visited.end(), 0);
            
            dfs_one_node(i);
            //cout<<i<<endl;
            if(ans==0)return ans;
            
        }
        
        
        return ans;
    }
};